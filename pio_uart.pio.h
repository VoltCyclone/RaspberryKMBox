// ---------------------------------------------------------------- //
// This file is autogenerated by pioasm version 2.2.0; do not edit! //
// ---------------------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// uart_tx //
// ------- //

#define uart_tx_wrap_target 0
#define uart_tx_wrap 6
#define uart_tx_pio_version 0

static const uint16_t uart_tx_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block
    0x6028, //  1: out    x, 8
    0xe700, //  2: set    pins, 0                [7]
    0x6701, //  3: out    pins, 1                [7]
    0x0043, //  4: jmp    x--, 3
    0xe701, //  5: set    pins, 1                [7]
    0xa042, //  6: nop
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program uart_tx_program = {
    .instructions = uart_tx_program_instructions,
    .length = 7,
    .origin = -1,
    .pio_version = uart_tx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config uart_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + uart_tx_wrap_target, offset + uart_tx_wrap);
    return c;
}
#endif

// ------- //
// uart_rx //
// ------- //

#define uart_rx_wrap_target 0
#define uart_rx_wrap 5
#define uart_rx_pio_version 0

static const uint16_t uart_rx_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0
    0xa342, //  1: nop                           [3]
    0xe027, //  2: set    x, 7
    0x4701, //  3: in     pins, 1                [7]
    0x0043, //  4: jmp    x--, 3
    0x8020, //  5: push   block
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program uart_rx_program = {
    .instructions = uart_rx_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = uart_rx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config uart_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + uart_rx_wrap_target, offset + uart_rx_wrap);
    return c;
}
#endif

